#version 440
layout(triangles) in;

uniform float t;

patch in mat4 tes_projection;

out mat4 geo_projection;

const vec2 EPSILON = vec2(1e-4, 0.0);

uint tobyte(uint x)
{
    return (x * 993u ^ ((x >> 4u) & 0xfu));
}

float noise(vec2 pos)
{
    const mat2 F = mat2(1.0) + 0.3660254037844386 * mat2(vec2(1.0, 1.0), vec2(1.0, 1.0));
    const mat2 G = mat2(1.0) - 0.21132486540518708 * mat2(vec2(1.0, 1.0), vec2(1.0, 1.0));
    const float R2 = 0.5;
    const float SQRT2 = 1.4142135623730951;
    const float SQRT2_2 = SQRT2/2;
    const uvec2 _01 = uvec2(0u, 1u);

    vec2 pos_ij = floor(F * pos);
    vec2 pos_uv = pos - G * pos_ij;

    float s = 0.0;

    uvec2 indices = uvec2(pos_ij);
    for(uint i = 0u; i < 3u; ++i)
    {
        uvec2 simplex_coord;
        if(i == 0u)
            simplex_coord = _01.xx;
        else if(i == 1u)
            simplex_coord = _01.yy;
        else if(pos_uv.x >= pos_uv.y)
            simplex_coord = _01.yx;
        else
            simplex_coord = _01.xy;
            
        vec2 diff = G * simplex_coord - pos_uv;
        float d2 = dot(diff, diff);
        
        uint _index = tobyte(indices.y + simplex_coord.y);
             _index = tobyte(indices.x + simplex_coord.x + _index);
        float angle = 0.024639215686274512 * float(_index);
        const float K = 6.28 / 10.0;
        vec2 g = vec2(cos(angle), sin(angle));

        float a = R2 - d2;
        if(a > 0.0)
        {
            a *= a;
            s += (a*a) * dot(g, diff);
        }
    }

    return s * 50.0;
    //return s * 67.88225099390857;
}

float fbm(vec2 x)
{
    const uint NOCTAVES = 8u;
    float f = 1.0;
    float t = 0.0;

    for(uint i = 0u; i < NOCTAVES; ++i)
    {
        t += noise(f*x) / f;
        f *= 2.0;
    }
    return t;
}

float height(vec2 x)
{
    return 10.0 * fbm(x / 50.0);
}

void main()
{
    vec2 v =
        gl_in[0].gl_Position.xy * gl_TessCoord.x
      + gl_in[1].gl_Position.xy * gl_TessCoord.y
      + gl_in[2].gl_Position.xy * gl_TessCoord.z
    ;

    const float K = 20.0;
    float k = floor(t / K) * K;
    vec4 virtualVertex = vec4(v.x, v.y + k, 0.0, 1.0);

    float h = height(virtualVertex.xy);

    geo_projection = tes_projection;
    gl_Position = vec4(v, h, 1.0);
}

