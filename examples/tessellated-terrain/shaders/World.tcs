#version 440
layout(vertices = 3) out;

uniform mat4 uproj;
uniform float t;

patch out mat4 tes_projection;

mat4 lookat(vec3 eye, vec3 target)
{
    const vec3 up = vec3(0.0, 0.0, 1.0);
    vec3 direction = normalize(target - eye);
    vec3 right = normalize(cross(direction, up));
    vec3 u = normalize(cross(right, direction));

    return mat4(
        vec4(right.x, u.x, -direction.x, 0.0),
        vec4(right.y, u.y, -direction.y, 0.0),
        vec4(right.z, u.z, -direction.z, 0.0),
        vec4(-dot(right, eye), -dot(u, eye), dot(direction, eye), 1.0)
    );
}

void main()
{
    const vec3 STATIC_EYE    = vec3(0.0, 0.0, 5.0);
    const vec3 STATIC_TARGET = vec3(0.0, 5.0, 0.0);
    const mat4 STATIC_LOOKAT = lookat(STATIC_EYE, STATIC_TARGET);
    const float K = 20.0;

    float k = floor(t / K) * K;
    mat4 m = uproj * STATIC_LOOKAT * mat4(
        vec4(1.0, 0.0, 0.0, 0.0),
        vec4(0.0, 1.0, 0.0, 0.0),
        vec4(0.0, 0.0, 1.0, 0.0),
        vec4(0.0, -1.0 - (t - k), 0.0, 1.0)
    );

    if(gl_InvocationID == 0)
    {
        vec4 center_world = (gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position) / 3.0;

        float base_in;
        float base_out;

        base_in  = 6.0;
        base_out = 6.0;

        if(center_world.z < -0.5)
        {
            base_in  /= 2.0;
            base_out /= 2.0;
        }

        const float L = 60.0;
        float l = ceil(center_world.y / L);

        base_in = ceil(base_in / l);
        base_out = ceil(base_out / l);

        tes_projection = m;
        gl_TessLevelOuter[0] = base_out;
        gl_TessLevelOuter[1] = base_out;
        gl_TessLevelOuter[2] = base_out;
        gl_TessLevelInner[0] = base_in;
        gl_TessLevelInner[1] = base_in;
    }

    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}

